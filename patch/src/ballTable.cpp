#include "wog2/misc.h"
#include "wog2/environment.h"
#include "ballTable.h"

extern "C" {

#define BASE_GOOBALL_COUNT 39

bool createBallTable(Storage* storage);

const char ballTablePath[] = "fisty/ballTable.ini";

const char ballTableHeader[] =
    "; This table defines all Gooball typeEnums\n"
    "; Extend this list to add your own gooballs.\n"
    "; \n"
    "; Generated by FistyLoader 1.1\n\n";

void initBallTable() {
    FileSystemUtils_CreateDir("fisty");
    
    Environment* environment = Environment_instance();
    Storage* storage = environment->getStorage();
    
    if (storage->FileExists(ballTablePath)) {
        load_ball_table(storage);
    } else {
        customGooballIds = gooballIds;
        gooballCount = BASE_GOOBALL_COUNT;
        
        bool success = createBallTable(storage);
        
        if (success) {
            SDL_ShowSimpleMessageBox(0x40, "Fisty Loader",
                "Successfully extracted assets from exe file into 'World of Goo 2 "
                "(current installation's game directory)/game/fisty'", 0);
        }
    }
}

bool createBallTable(Storage* storage) {
    FileHandle handle;
    bool result = storage->FileOpen(ballTablePath, 0x22, &handle);
    
    if (result != 0) {
        // TODO: Error message kind of outdated with the steam release
        SDL_ShowSimpleMessageBox(0x40, "Fisty Loader",
            "Failed to create ballTable.ini file. Make sure the game directory is not "
            "inside C:\\Program Files or any other place that requires administrator permissions.\n\n"
            "Continuing with default settings.", 0);
        
        return false;
    }
    
    storage->FileWrite(handle, ballTableHeader, sizeof(ballTableHeader) - 1);
    
    for (int i = 0; i < BASE_GOOBALL_COUNT; i++) {
        char buffer[0x80];
        int size = snprintf(buffer, sizeof(buffer), "%d=%s\n", i, gooballIds[i]);
        storage->FileWrite(handle, buffer, size);
    }
    
    storage->FileClose(handle);
    return true;
}

}
